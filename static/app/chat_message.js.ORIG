var Message = Backbone.Model.extend({
     urlRoot : 'ChatMessage',
     idAttribute: "guid",

     defaults: function() {
        return {
            color: 'black',
            username: 'anonymous',
            guid: "DEFAULT-" + Math.uuid(),
            isFromMe: false
        };
     },

    initialize: function() {
        _.bindAll(this, 'serverChange', 'serverDelete', 'modelCleanup');
        // this.ioBind('update', this.serverChange, this);
        // this.ioBind('delete', this.serverDelete, this);
        this.on('add', this.on_add, this);
        this.on('sync', this.on_sync, this);
    },

    on_add: function(d) {
        // console.log("On Add ", d);
    },
    on_sync: function(d) {
        // console.log("On Sync ", d);
    },

    serverChange: function(data) {
        // console.log("Server Change");
        data.fromServer = true;

        this.set(data);
    },

    serverDelete: function (data) {
        if (this.collection) {
            this.collection.remove(this);
        } else {
            this.trigger('remove', this);
        }
        this.modelCleanup();
    },

    modelCleanup: function () {
        this.ioUnbindAll();
        return this;
    }
});

var MessageStore = Backbone.Collection.extend({
    url     : 'ChatMessage',
    model: Message,

    initialize: function (model) {
        _.bindAll(this, 'serverCreate', 'collectionCleanup');

        // _.bindAll(this, 'serverUpsert', 'serverDelete');

        // this.ioBind('create', this.serverCreate, this);
        
        this.syncBind('upsert', this.serverUpsert, this);
        this.syncBind('delete', this.serverDelete, this);
    },

    serverUpsert: function(data) {
        // console.log("Server Upsert");
        var m = this.get(data.guid);
        if (m) {
            m.set(data);
        } else {
            this.add(data);
        }
    },

    serverDelete: function(data) {
        // console.log("Server Delete");
        var m = this.get(data.guid);
        if (m) 
            this.remove(m);
    },

    serverCreate: function(data) {
        var obj = this.get(data.id);
        // console.log(data.id);
        // console.log(obj);
        // console.log(data);
        if (obj) {
            obj.set(data);
        } else {
            obj = this.add(data);
            // console.log(obj.id);
        }
    },

    collectionCleanup: function (callback) {
        this.ioUnbindAll();
        this.each(function (model) {
            model.modelCleanup();
        });
        return this;
    }
});

$(document).ready(function() {
    var messages = new MessageStore();

    messages.fetch();

    var MessageView = Backbone.View.extend({
        tagName: "div",
        className: "message-wrapper",
        template: '<div class="screen-name"><span class="delete">&times</span><%= username %></div><div class="message"><%= content %></div>',

        events: {
            "click" : "changeColor",
            "click .delete" : "removeMessage"
        }, 

        initialize: function() {
            _.bindAll(this, 'changeColor', 'removeMessage');

            this.model.bind('change', this.on_change, this);
            this.model.bind('destroy', this.remove, this);
            // this.collection.bind('remove', this.on_removed, this);
        },

        render: function() {
            var tmpl = _.template(this.template);
            this.$el.html(tmpl(this.model.toJSON()));
            if (this.model.get('isFromMe'))
                this.$el.addClass('is-from-me');
            $('.message', this.el).css({ color: this.model.get('color') });
            return this;
        },

        removeMessage: function(evt) {
            this.model.destroy();
            evt.stopPropagation();
        },

        on_change: function() {
            this.render();
        },

        on_remove: function() {
            this.unrender();
        },

        changeColor: function(evt) {
            var m = this.model;
            m.set({ color: (m.get('color') == 'red') ? 'black' : 'red' });
            m.save()
            evt.stopPropagation();
        }
    });

    var MessageCollectionView = Backbone.View.extend({
        views: {},
        
        events: {
            // "submit #chatForm" : "handleNewMessage" 
            "click button" : "handleNewMessage",
            "keypress input" : "handleReturnKey" 
        }, 

        initialize: function (model) {
            _.bindAll(this, 'render', 'addOne', 'removeOne');

            this.collection.bind('reset', this.render);
            this.collection.bind('add', this.addOne);
            this.collection.bind('remove', this.removeOne);

            // this.collection.bind('remove', this.render);
            // this.collection.bind('all', this.render);
        },

        handleNewMessage: function(evt) {
            var inputField = $('input[type="text"]');
            messages.create({content: inputField.val()});
            inputField.val('');
            evt.preventDefault();
        },

        handleReturnKey: function(evt) {
            if (evt.keyCode == 13)
                this.handleNewMessage(evt);
        },

        render: function() {
            var self = this;
            this.collection.each(function(item) {
                self.renderItem(item);
            });
        },

        renderItem: function(item) {
            var view = new MessageView({ model: item });
            this.views[item.cid] = view;
            $('#messages-inner', this.el).append(view.render().el);
        },

        addOne: function(item) {
            this.renderItem(item);
            $('#messages-inner', this.el).animate({ scrollTop: 490 });
        },

        removeOne: function(item) {
            this.views[item.cid].remove();
            delete this.views[item.cid];
        }
    });


    var view = new MessageCollectionView({el: $('#messages'), collection: messages });
});

function MessageModule() {
    this.messagesView = new MessagesView();
    this.sendMessageView = new SendMessageView();
}

messageModule = new MessageModule();
